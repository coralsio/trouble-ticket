<?php

namespace Tests\Feature;

use Corals\Modules\TroubleTicket\Models\IssueType;
use Corals\Modules\TroubleTicket\Models\TroubleTicket;
use Corals\Modules\Utility\Category\Facades\Category;
use Corals\Modules\Utility\ListOfValue\Facades\ListOfValues;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class TroubleTicketsTest extends TestCase
{
    use DatabaseTransactions;

    protected $troubleTicket;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_trouble_tickets_store()
    {
        $status = array_rand(ListOfValues::get('tt_status'));
        $priority = array_rand(ListOfValues::get('tt_priority'));
        $category = array_rand(Category::getCategoriesByParent('tt-categories'));
        $issueType = array_rand(IssueType::all()->pluck('title', 'id')->toArray());
        $owner = array_rand(User::all()->pluck('name', 'id')->toArray());

        $response = $this->post(
            'trouble-ticket/trouble-tickets',
            [
                'title' => 'trouble-ticket',
                'status' => $status,
                'priority' => $priority,
                'category_id' => $category,
                'issue_type_id' => $issueType,
                'owner_id' => $owner,
                'assignee_id' => 1,
                'description' => 'trouble-ticket',
            ]
        );

        $this->troubleTicket = TroubleTicket::query()->where('title', 'trouble-ticket')->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('trouble-ticket/trouble-tickets');

        $this->assertDatabaseHas('tt_trouble_tickets', [
            'title' => $this->troubleTicket->title,
            'status' => $this->troubleTicket->status,
            'priority' => $this->troubleTicket->priority,
            'category_id' => $this->troubleTicket->category_id,
            'issue_type_id' => $this->troubleTicket->issue_type_id,
            'owner_id' => $this->troubleTicket->owner_id,
        ]);
    }

    public function test_trouble_tickets_delete()
    {
        $this->test_trouble_tickets_store();

        if ($this->troubleTicket) {
            $response = $this->delete('trouble-ticket/trouble-tickets/' . $this->troubleTicket->hashed_id);

            $response->assertStatus(200)->assertSeeText('Support Ticket has been deleted successfully.');

            $this->isSoftDeletableModel(TroubleTicket::class);
            $this->assertDatabaseMissing('tt_trouble_tickets', [
                'title' => $this->troubleTicket->title,
                'status' => $this->troubleTicket->status,
                'priority' => $this->troubleTicket->priority,
                'category_id' => $this->troubleTicket->category_id,
                'issue_type_id' => $this->troubleTicket->issue_type_id,
                'owner_id' => $this->troubleTicket->owner_id,
            ]);
        }
        $this->assertTrue(true);
    }
}
